#!/usr/bin/env python3
import sys
import xml.etree.ElementTree as ET

def parse_value(element):
	if element.tag == "string":
		return element.text
	elif element.tag == "dict":
		return parse_dict(element)
	elif element.tag == "array":
		return parse_array(element)
	else:
		exception = "Unknown tag `" + element.tag + "`"
		raise Exception(exception)

def parse_array(root):
	sequence = []

	for element in root:
		if element.tag == "key":
			exception = "Arrays must not have a key. Found key `" + element.text + "`"
			raise Exception(exception)
		else:
			sequence.append(parse_value(element))

	return sequence

def parse_dict(root):
	lastKey = None;
	sequence = {}

	for element in root:
		if element.tag == "key":
			if lastKey:
				exception = "Missing value for key `" + lastKey + "`"
				raise Exception(exception)
			lastKey = element.text
			
		else:
			if not lastKey:
				exception = "Missing value for key after `" + lastKey + "`"
				raise Exception(exception)

			sequence[lastKey] = parse_value(element)
			lastKey = None

	return sequence

def parse_file(filename):
	xml_file = open(filename, 'r')
	file_contents = xml_file.read()

	# Filter out all control characters.
	mpa = dict.fromkeys(range(32))
	file_contents = file_contents.translate(mpa)

	return parse_dict(ET.fromstring(file_contents)[0])

def write_style(file, name, foreground, background, italic):
	file.write("\t<style name=\"" + name + "\" ")
	if foreground:
		file.write("foreground=\"" + foreground + "\" ")
	if background:
		file.write("background=\"" + background + "\" ")
	if italic:
		file.write("italic=\"true\" ")
	file.write("/>\n")

def create_file(filename, data):
	f = open(filename, "w")
	# f.write("<!-- Generated by Qt TmTheme Converter -->\n")
	# f.write("<!-- Original file by " + data["author"] + ". -->\n")
	f.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
	f.write("<style-scheme version=\"1.0\" name=\"" + data["name"] + "\">\n")

	if "gutterSettings" in data:
		gutter_settings = data["gutterSettings"]
		write_style(f, "LineNumber", gutter_settings["foreground"], None, False)
		write_style(f, "DisabledCode", gutter_settings["foreground"], None, False)

	key_map = {
		"comment": ["Comment"],
		"constant.numeric": ["Number"],
		"entity.name.function": ["Function"],
		"constant": ["Constant"],
		"string": ["String"],
		"keyword": ["Keyword", "Preprocessor"],
		"keyword.operator": ["Operator"],
		"variable": ["Field"],
		# "storage": ["PrimitiveType"],
		"storage.type": ["PrimitiveType"]
	}

	for setting in data["settings"]:
		if "scope" in setting:
			# print("Check: ", setting["scope"].split(","))
			for scope in setting["scope"].split(","):
				scope = scope.strip()
				if scope in key_map:
					full_settings = setting["settings"];
					background = None
					foreground = None
					italics = False
					if "foreground" in full_settings:
						foreground = full_settings["foreground"]
					if "background" in full_settings:
						background = full_settings["background"]
					if "fontStyle" in full_settings:
						italics = full_settings["fontStyle"] == "italic"
					for key in key_map[scope]:
						write_style(f, key, foreground, background, italics)

		elif "settings" in setting:
			full_settings = setting["settings"];
			write_style(f, "Text", full_settings["foreground"], full_settings["background"], False)
			write_style(f, "Type", full_settings["foreground"], full_settings["background"], False)
			write_style(f, "Enumeration", full_settings["foreground"], full_settings["background"], False)
			write_style(f, "Selection", None, full_settings["selection"], False)
			write_style(f, "CurrentLine", None, full_settings["lineHighlight"], False)
			write_style(f, "VisualWhitespace", full_settings["invisibles"], None, False)
		else:
			raise Exception("Unknown setting type")
		# f.write("\t\n")

	f.write("</style-scheme>\n")

def main():
	if len(sys.argv) != 3:
		print("Invalid number of arguments. Must be: `converter.py input output`")
		return

	create_file(sys.argv[2], parse_file(sys.argv[1]))

main()
